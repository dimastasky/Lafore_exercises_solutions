// Создать класс Polar для хранения полярных координат. Перегрузить операцию сложения (+)
// для сложения двух объектов класса Polar.

// В прямоугольной системе координат каждая точка задается двумя числами: координатой по
// горизонтальной оси (x) и координатой по вертикальной оси (y). Точка пересечения этих
// осей является началом координат. Если масштабы обеих осей одинаковы, то такая
// прямоугольная система координат называется декартовой.

// В полярной системе координат каждая точка задается двумя числами: радиусом и углом.
// Радиус всегда больше или равен нулю (это расстояние от начала системы координат (полюса)
// до точки). Угол может измеряться в градусах или радианах (это угол между горизонтальной
// линией, проведенной через полюс и линией, проведенной через полюс и нашу точку).

// Угол в классе будем хранить в радианах, так как встроенные тригонометрические и обратные
// тригонометрические функции требуют задания аргументов в радианах. Однако, при приеме
// данных от пользователя сделаем возможность задать угол и в радианах, и в градусах. Оба
// варианта должны быть доступны и при выводе данных объекта класса на экран.

#include <iostream>

using namespace std;

const double PI = acos(-1.0); //Число Pi

class Polar //Класс для полярных координат
{
private:
	double radius; // Радиус (>=0)
	double angle; // Угол (в радианах)
public:
	Polar() : radius(0.0),angle(0.0)
	{ }
	// Метод для получения данных объекта от пользователя
	void get(bool in_radians)
	{
		cout << "Введите радиус: "; cin >> radius;
		if (radius < 0)
		{
			cout << "Ошибка! Радиус не может быть меньше нуля. " << endl; 
			exit(1);
		}

		if (radius < 0) //true
		{
			cout << " Введите угол (в радианах): "; cin >> angle;
		}
		else //false
		{
			int deg; //Градусы
			cout << " Введите угол (в градусах): "; cin >> deg;
			angle = deg * PI / 180; // Перевод в радианы
		}
	}
	// Метод для отображения данных объекта на экране
	void put(bool in_radians)
	{
		cout << "Радиус: " << radius << endl;
		if (in_radians) //true
		{
			cout << "Угол (в радианах): " << angle << endl;
		}
		else //false
		{
			cout << "Угол (в градусах): " << angle * 180 / PI << endl;
		}
	}
	//Перегрузка операции сложения для сложения двух объектов класса
	Polar operator+ (Polar p) const; //прототип
};


int main()
{
	setlocale(LC_ALL, "");

	Polar p1, p2, res; // точки на плоскости в полярных координатах

	cout << "Введите первую точку в полярных координатах: \n"; p1.get(false);
	cout << "Введите вторую точку в полярных координатах: \n"; p2.get(false);

	res = p1 + p2;

	cout << "Результат сложения: \n"; res.put(false);

	return 0;
}

// Перегрузка операции сложения для сложения двух объектов класса
Polar Polar::operator+ (Polar p) const
{
	// Перевод полярных координат первой точки в декартовы
	double x = radius * cos(angle);
	double y = radius * sin(angle);

	// Перевод полярных координат второй точки в декартовы,
	// складывание с декартовыми координатами первой точки
	x += p.radius * cos(p.angle);
	y += p.radius * sin(p.angle);

	// Перевод декартовых координат новой точки в полярные
	Polar res;
	res.radius = sqrt(x * x + y * y);
	res.angle = atan2(y, x);

	return res;
}